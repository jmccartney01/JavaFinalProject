
import com.google.gson.Gson;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.time.Instant;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.HttpsURLConnection;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author jmcca
 */
public class Weather extends javax.swing.JFrame {

    static long time;
    static double lat;
    static double lng;
    Gson gson = new Gson();
    
    public Weather() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        weatherHomeBtn = new javax.swing.JButton();
        airTemp = new javax.swing.JLabel();
        waterTemp = new javax.swing.JLabel();
        waveHeight = new javax.swing.JLabel();
        waveDirec = new javax.swing.JLabel();
        swellHeight = new javax.swing.JLabel();
        swellDirec = new javax.swing.JLabel();
        windSpeed = new javax.swing.JLabel();
        windDirec = new javax.swing.JLabel();
        currSpeed = new javax.swing.JLabel();
        currDirec = new javax.swing.JLabel();
        precip = new javax.swing.JLabel();
        cloudCover = new javax.swing.JLabel();
        visib = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        weatherEnterBtn = new javax.swing.JButton();
        weatherComboBox = new javax.swing.JComboBox<>();
        weatherUpdateBtn = new javax.swing.JButton();
        locationComboBox = new javax.swing.JComboBox<>();
        airTempLbl = new javax.swing.JLabel();
        waterTempLbl = new javax.swing.JLabel();
        waveHeightLbl = new javax.swing.JLabel();
        waveDirecLbl = new javax.swing.JLabel();
        swellHeightLbl = new javax.swing.JLabel();
        swellDirecLbl = new javax.swing.JLabel();
        windSpeedLbl = new javax.swing.JLabel();
        windDirecLbl = new javax.swing.JLabel();
        currSpeedLbl = new javax.swing.JLabel();
        currDirecLbl = new javax.swing.JLabel();
        precipLbl = new javax.swing.JLabel();
        cloudCoverLbl = new javax.swing.JLabel();
        visibLbl = new javax.swing.JLabel();
        metersToggleButton = new javax.swing.JToggleButton();
        tempToggleButton = new javax.swing.JToggleButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        weatherHomeBtn.setText("Home");
        weatherHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherHomeBtnActionPerformed(evt);
            }
        });

        airTemp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        airTemp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        airTemp.setText("Air Temperature:");

        waterTemp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        waterTemp.setText("Water Temperature:");

        waveHeight.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        waveHeight.setText("Wave Height:");

        waveDirec.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        waveDirec.setText("Wave Direction:");

        swellHeight.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        swellHeight.setText("Swell Height:");

        swellDirec.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        swellDirec.setText("Swell Direction:");

        windSpeed.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        windSpeed.setText("Wind Speed:");

        windDirec.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        windDirec.setText("Wind Direction:");

        currSpeed.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        currSpeed.setText("Current Speed:");

        currDirec.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        currDirec.setText("Current Direction:");

        precip.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        precip.setText("Precipitation:");

        cloudCover.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cloudCover.setText("Cloud Cover:");

        visib.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        visib.setText("Visibility:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel14.setText("Sweather");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Enter City and State:");

        weatherEnterBtn.setText("Enter");
        weatherEnterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherEnterBtnActionPerformed(evt);
            }
        });

        weatherComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Now", "Next 3 Hours", "Next 6 Hours", "Next 9 Hours" }));
        weatherComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherComboBoxActionPerformed(evt);
            }
        });

        weatherUpdateBtn.setText("Update Weather");
        weatherUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherUpdateBtnActionPerformed(evt);
            }
        });

        locationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Salem, MA", "Miami, FL", "Los Angeles, CA", "Kawela Bay, HI", "Platinum, AK", " ", " ", " " }));

        airTempLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        airTempLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        airTempLbl.setText("-");

        waterTempLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        waterTempLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        waterTempLbl.setText("-");

        waveHeightLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        waveHeightLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        waveHeightLbl.setText("-");

        waveDirecLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        waveDirecLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        waveDirecLbl.setText("-");

        swellHeightLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        swellHeightLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        swellHeightLbl.setText("-");

        swellDirecLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        swellDirecLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        swellDirecLbl.setText("-");

        windSpeedLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        windSpeedLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        windSpeedLbl.setText("-");

        windDirecLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        windDirecLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        windDirecLbl.setText("-");

        currSpeedLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currSpeedLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        currSpeedLbl.setText("-");

        currDirecLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currDirecLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        currDirecLbl.setText("-");

        precipLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        precipLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        precipLbl.setText("-");

        cloudCoverLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cloudCoverLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cloudCoverLbl.setText("-");

        visibLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        visibLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        visibLbl.setText("-");

        metersToggleButton.setText("Convert Measurements");

        tempToggleButton.setText("Convert Temperature");
        tempToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(weatherHomeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weatherUpdateBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(visib)
                                            .addComponent(cloudCover)
                                            .addComponent(precip)
                                            .addComponent(currDirec)
                                            .addComponent(currSpeed)
                                            .addComponent(windDirec)
                                            .addComponent(windSpeed)
                                            .addComponent(swellDirec)
                                            .addComponent(swellHeight)
                                            .addComponent(waveDirec)
                                            .addComponent(waveHeight)
                                            .addComponent(waterTemp)
                                            .addComponent(airTemp)
                                            .addComponent(jLabel15))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(weatherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(weatherEnterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(visibLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                                .addComponent(cloudCoverLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(precipLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(currDirecLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(currSpeedLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(windDirecLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(windSpeedLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(swellDirecLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(swellHeightLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(waveDirecLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(waveHeightLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(waterTempLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(airTempLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(metersToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 48, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tempToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(weatherEnterBtn)
                    .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weatherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(metersToggleButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(tempToggleButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(airTemp)
                            .addComponent(airTempLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(waterTemp))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(waterTempLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waveHeight)
                    .addComponent(waveHeightLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waveDirec)
                    .addComponent(waveDirecLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(swellHeight)
                    .addComponent(swellHeightLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(swellDirec)
                    .addComponent(swellDirecLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(windSpeed)
                    .addComponent(windSpeedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(windDirec)
                    .addComponent(windDirecLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currSpeed)
                    .addComponent(currSpeedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currDirec)
                    .addComponent(currDirecLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precip)
                    .addComponent(precipLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cloudCoverLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cloudCover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(visibLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(visib, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weatherHomeBtn)
                    .addComponent(weatherUpdateBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weatherHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherHomeBtnActionPerformed
        HomeScreen homeWin = new HomeScreen();
        homeWin.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_weatherHomeBtnActionPerformed

    private void weatherEnterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherEnterBtnActionPerformed
        String timeFrame = weatherComboBox.getSelectedItem() + "";
        String location = locationComboBox.getSelectedItem() + "";
        
        switch (timeFrame) {
            case "Next 3 Hours":
                time = Instant.now().getEpochSecond() + 10800;
                break;
            case "Next 6 Hours":
                time = Instant.now().getEpochSecond() + 21600;
                break;
            case "Next 9 Hours":
                time = Instant.now().getEpochSecond() + 32400;
                break;
            default:
                time = Instant.now().getEpochSecond();
                break;
        }
        
        if(location.equals("Miami, FL")) {
            lat = 25.79686163821756;
            lng = -80.18273711920398;
        }else if(location.equals("Los Angeles, CA")) {
            lat = 33.77178425376961;
            lng = -118.11028880016842;
        }else if(location.equals("Kawela Bay, HI")) {
            lat = 21.703461643464003;
            lng = -157.9956291204877;
        }else if(location.equals("Platinum, AK")) {
            lat = 59.00352396220253;
            lng = -161.7902125258627;
        }else {
            lat = 42.4683705155974;
            lng = -70.9200429688498;
        }
        
//        try {
//            URL urlNew = new URL("https://api.api-ninjas.com/v1/geocoding"
//                                    + "?city=" + cityField.getText()
//                                    + "&country=US");
//            
//            HttpsURLConnection connection = (HttpsURLConnection)urlNew.openConnection();
//            connection.setRequestProperty("X-Api-Key", "uP902bYcpKy05cVNdP5QIVjiJgatQMjnwpfYBZqg");
//            connection.setRequestMethod("GET");
//            connection.connect();
//            
//            int respCode = connection.getResponseCode();
//            
//            if(respCode != 200) {
//                throw new RuntimeException("HttpsResponseCode: " + respCode);
//            }else {
//                String inputLine = "";
//                Scanner scan = new Scanner(urlNew.openStream());
//                
//                while(scan.hasNext()) {
//                    inputLine += scan.nextLine();
//                }
//                
//                scan.close();
//                
//                Coordinates info = gson.fromJson(inputLine, Coordinates.class);
//            }
//        } catch (MalformedURLException ex) {
//            Logger.getLogger(Weather.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(Weather.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        
    }//GEN-LAST:event_weatherEnterBtnActionPerformed

    private void weatherComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherComboBoxActionPerformed

    }//GEN-LAST:event_weatherComboBoxActionPerformed

    private void weatherUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherUpdateBtnActionPerformed
            try {
            URL url = new URL("https://api.stormglass.io/v2/weather/point"
                    + "?lat=" + lat
                    + "&lng=" + lng
                    + "&params=airTemperature,waterTemperature,waveHeight,waveDirection,"
                        + "swellHeight,swellDirection,windSpeed,windDirection,currentSpeed,"
                        + "currentDirection,precipitation,cloudCover,visibility"
                    + "&start=" + time
                    + "&end=" + time
                    + "&source=sg"
                    + "&key=133eff0a-5f83-11ed-a138-0242ac130002-133effb4-5f83-11ed-a138-0242ac130002");
            
            HttpsURLConnection conn = (HttpsURLConnection)url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();
            
            int responseCode = conn.getResponseCode();
            
            if(responseCode != 200) {
                throw new RuntimeException("HttpsResponseCode: " + responseCode);
            }else {
                String inLine = "";
                Scanner scanner = new Scanner(url.openStream());
                
                while(scanner.hasNext()) {
                    inLine += scanner.nextLine();
                }
                
                scanner.close();
                
                WeatherInformation info = gson.fromJson(inLine, WeatherInformation.class);
                
                DecimalFormat format = new DecimalFormat("0.00");
                
                double currSpeedFeet = (info.hours[0].currentSpeed.sg * 3.28);
                double swellDirectionFeet = info.hours[0].swellDirection.sg * 3.28;
                double visibilityMiles = info.hours[0].visibility.sg * 0.62;
                double waveHeightFeet = info.hours[0].waveHeight.sg * 3.28;
                double windSpeedFeet = info.hours[0].windSpeed.sg * 3.28;
                int airTemperatureF = (int)info.hours[0].airTemperature.sg * (9/5) + 32;
                int waterTemperatureF = (int)info.hours[0].waterTemperature.sg * (9/5) + 32;
                
                airTempLbl.setText(String.valueOf(info.hours[0].airTemperature.sg) + "°C");
                cloudCoverLbl.setText(String.valueOf(info.hours[0].cloudCover.sg) + "%");
                currDirecLbl.setText(String.valueOf(info.hours[0].currentDirection.sg) + "°");
                currSpeedLbl.setText(String.valueOf(info.hours[0].currentSpeed.sg) + " Meters Per Second");
                precipLbl.setText(String.valueOf(info.hours[0].precipitation.sg) + "%");
                swellDirecLbl.setText(String.valueOf(info.hours[0].swellDirection.sg) + "°");
                swellHeightLbl.setText(String.valueOf(info.hours[0].swellDirection.sg) + " Meters");
                visibLbl.setText(String.valueOf(info.hours[0].visibility.sg) + " km");
                waterTempLbl.setText(String.valueOf(info.hours[0].waterTemperature.sg) + "°C");
                waveDirecLbl.setText(String.valueOf(info.hours[0].waveDirection.sg) + "°");
                waveHeightLbl.setText(String.valueOf(info.hours[0].waveHeight.sg) + " Meters");
                windDirecLbl.setText(String.valueOf(info.hours[0].windDirection.sg) + "°");
                windSpeedLbl.setText(String.valueOf(info.hours[0].windSpeed.sg) + " Meters Per Second");
                
                if(metersToggleButton.isSelected()) {
                    currSpeedLbl.setText(String.valueOf(format.format(currSpeedFeet)) + " Feet Per Second");
                    swellHeightLbl.setText(String.valueOf(format.format(swellDirectionFeet)) + " Feet");
                    visibLbl.setText(String.valueOf(format.format(visibilityMiles)) + " miles");
                    waveHeightLbl.setText(String.valueOf(format.format(waveHeightFeet)) + " Feet");
                    windSpeedLbl.setText(String.valueOf(format.format(windSpeedFeet)) + " Feet Per Second");
                }
                if(tempToggleButton.isSelected()) {
                    airTempLbl.setText(String.valueOf(airTemperatureF) + "°F");
                    waterTempLbl.setText(String.valueOf(waterTemperatureF) + "°F");
                }
                if(metersToggleButton.isSelected() && tempToggleButton.isSelected()) {
                    currSpeedLbl.setText(String.valueOf(format.format(currSpeedFeet)) + " Feet Per Second");
                    swellHeightLbl.setText(String.valueOf(format.format(swellDirectionFeet)) + " Feet");
                    visibLbl.setText(String.valueOf(format.format(visibilityMiles)) + " miles");
                    waveHeightLbl.setText(String.valueOf(format.format(waveHeightFeet)) + " Feet");
                    windSpeedLbl.setText(String.valueOf(format.format(windSpeedFeet)) + " Feet Per Second");
                    airTempLbl.setText(String.valueOf(airTemperatureF) + "°F");
                    waterTempLbl.setText(String.valueOf(waterTemperatureF) + "°F");
                }   
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(Weather.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Weather.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_weatherUpdateBtnActionPerformed

    private void tempToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempToggleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tempToggleButtonActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Weather().setVisible(true);
            }
        });
    }
    
    class WeatherInformation {
        class Hour {
            class AirTemperature {
                double sg;
            }
            AirTemperature airTemperature;
            class WaterTemperature {
                double sg;
            }
            WaterTemperature waterTemperature;
            class WaveHeight {
                double sg;
            }
            WaveHeight waveHeight;
            class WaveDirection {
                double sg;
            }
            WaveDirection waveDirection;
            class SwellHeight {
                double sg;
            }
            SwellHeight swellHeight;
            class SwellDirection {
                double sg;
            }
            SwellDirection swellDirection;
            class WindSpeed {
                double sg;
            }
            WindSpeed windSpeed;
            class WindDirection {
                double sg;
            }
            WindDirection windDirection;
            class CurrentSpeed {
                double sg;
            }
            CurrentSpeed currentSpeed;
            class CurrentDirection {
                double sg;
            }
            CurrentDirection currentDirection;
            class Precipitation {
                double sg;
            }
            Precipitation precipitation;
            class CloudCover {
                double sg;
            }
            CloudCover cloudCover;
            class Visibility {
                double sg;
            }
            Visibility visibility;
        }
        Hour[] hours;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel airTemp;
    private javax.swing.JLabel airTempLbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel cloudCover;
    private javax.swing.JLabel cloudCoverLbl;
    private javax.swing.JLabel currDirec;
    private javax.swing.JLabel currDirecLbl;
    private javax.swing.JLabel currSpeed;
    private javax.swing.JLabel currSpeedLbl;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> locationComboBox;
    private javax.swing.JToggleButton metersToggleButton;
    private javax.swing.JLabel precip;
    private javax.swing.JLabel precipLbl;
    private javax.swing.JLabel swellDirec;
    private javax.swing.JLabel swellDirecLbl;
    private javax.swing.JLabel swellHeight;
    private javax.swing.JLabel swellHeightLbl;
    private javax.swing.JToggleButton tempToggleButton;
    private javax.swing.JLabel visib;
    private javax.swing.JLabel visibLbl;
    private javax.swing.JLabel waterTemp;
    private javax.swing.JLabel waterTempLbl;
    private javax.swing.JLabel waveDirec;
    private javax.swing.JLabel waveDirecLbl;
    private javax.swing.JLabel waveHeight;
    private javax.swing.JLabel waveHeightLbl;
    private javax.swing.JComboBox<String> weatherComboBox;
    private javax.swing.JButton weatherEnterBtn;
    private javax.swing.JButton weatherHomeBtn;
    private javax.swing.JButton weatherUpdateBtn;
    private javax.swing.JLabel windDirec;
    private javax.swing.JLabel windDirecLbl;
    private javax.swing.JLabel windSpeed;
    private javax.swing.JLabel windSpeedLbl;
    // End of variables declaration//GEN-END:variables
}
